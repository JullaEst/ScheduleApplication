package Controller;

import DBAccess.AppointmentsDB;
import Model.Appointments;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

/**
*The AppointmentScreen controller handles the table view where the user can view a list of appointments
and the viewer is able to filter the view by weekly, monthly, and view all. The user is able to add,
edit, delete an appointment and to go back to the main screen.
 **/

public class AppointmentsScreen implements Initializable {

    public TableView <Appointments> viewApptList;

    public TableColumn apptIDCol;
    public TableColumn titleCol;
    public TableColumn descriptionCol;
    public TableColumn locationCol;
    public TableColumn contactCol;
    public TableColumn apptTypeCol;
    public TableColumn dateCol;
    public TableColumn startTimeCol;
    public TableColumn endTimeCol;
    public TableColumn customerIdCol;
    public TableColumn userIdCol;

    public RadioButton viewWeekly;
    public RadioButton viewMonthly;
    public RadioButton viewAll;

    public Button mainScreen;
    public Button addButton;
    public Button editButton;
    public Button deleteButton;

    Appointments appointments;

    //ObservableList<Appointments> appointmentSelected = FXCollections.observableArrayList();

    //Radio button for View Weekly, produces a list to filter appointments
    public void onViewWeekly(ActionEvent event) {
        if(viewWeekly.isSelected()){
            viewApptList.setItems(AppointmentsDB.getAppointmentByWeek());
        }

    }

    //Radio button for View Month, produces a list to filter appointments
    public void onViewMonthly(ActionEvent event) {
        if(viewMonthly.isSelected()){
            viewApptList.setItems(AppointmentsDB.getAppointmentByMonth());
        }
    }

    //Radio button for View All, produces a list to filter appointments
    public void onViewAll(ActionEvent event) {
        if(viewAll.isSelected()){
            viewApptList.setItems(AppointmentsDB.getAllAppointments());

        }

    }

    //Add Button directs to the Add Appointment Screen
    public void onAddButton(ActionEvent event) throws IOException {
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Object scene = FXMLLoader.load(getClass().getResource("/View/AddAppointment.fxml"));
        stage.setScene(new Scene((Parent) scene));
        stage.show();
    }

    //Edit Button directs to the Edit Appointment screen
    public void onEditButton(ActionEvent event) throws IOException {
        if(viewApptList.getSelectionModel().getSelectedItem() != null) {
            Appointments selectedAppt;
            selectedAppt = (Appointments) viewApptList.getSelectionModel().getSelectedItem();

            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("/View/EditAppointment.fxml"));
            loader.load();

            EditAppointment controller = loader.getController();
            controller.sendAppt(selectedAppt);

            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Parent scene = loader.getRoot();
            stage.setScene(new Scene((Parent) scene));
            stage.show();
        }

    }

    //When Delete button is clicked an appointment will be deleted from the database
    public void onDeleteButton(ActionEvent event) throws IOException {

        Appointments a = viewApptList.getSelectionModel().getSelectedItem();

        if(a != null)
        {
            Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);
            confirm.setTitle("Appointments");
            confirm.setHeaderText("Confirm Appointment Cancellation");
            confirm.setContentText("Are you sure you want to delete this appointment?");
            confirm.showAndWait();

            if(confirm.getResult() == ButtonType.OK)
            {
                if(AppointmentsDB.deleteAppointment(a)) {
                    viewApptList.setItems(AppointmentsDB.getAllAppointments());
                    Alert alert = new Alert((Alert.AlertType.INFORMATION));
                    alert.setTitle("Appointments");
                    alert.setHeaderText("Deletion Complete");
                    alert.setContentText("Appointment is deleted.");
                    alert.showAndWait();
                }
            }
        } else {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Appointments");
            alert.setHeaderText("No Appointment Selected");
            alert.setContentText("Please select an appointment to delete");
            alert.showAndWait();
        }

    }

    //When main screen button is clicked, directs user back to the main screen
    public void onMainScreen(ActionEvent event) throws IOException {
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Object scene = FXMLLoader.load(getClass().getResource("/View/MainMenu.fxml"));
        stage.setScene(new Scene((Parent) scene));
        stage.show();
    }


    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        //deleteApptTable();

        //collects all appointments
        viewApptList.setItems(AppointmentsDB.getAllAppointments());

        //collects data for the columns in the Appointments tableview
        apptIDCol.setCellValueFactory(new PropertyValueFactory<>("ApptId"));
        titleCol.setCellValueFactory(new PropertyValueFactory<>("Title"));
        descriptionCol.setCellValueFactory(new PropertyValueFactory<>("Description"));
        locationCol.setCellValueFactory(new PropertyValueFactory<>("Location"));
        contactCol.setCellValueFactory(new PropertyValueFactory<>("Contact"));
        apptTypeCol.setCellValueFactory(new PropertyValueFactory<>("ApptType"));
        dateCol.setCellValueFactory(new PropertyValueFactory<>("Date"));
        startTimeCol.setCellValueFactory(new PropertyValueFactory<>("StartTime"));
        endTimeCol.setCellValueFactory(new PropertyValueFactory<>("EndTime"));
        customerIdCol.setCellValueFactory(new PropertyValueFactory<>("CustomerId"));
        userIdCol.setCellValueFactory(new PropertyValueFactory<>("UserId"));
    }

}
