package Controller;

import DBAccess.AppointmentsDB;
import DBAccess.ContactsDB;
import DBAccess.CustomersDB;
import DBAccess.UsersDB;
import Model.Appointments;
import Model.Contacts;
import Model.Customers;
import Model.Users;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.function.Consumer;

/**
 * Controller contains class and methods for the user to add appointments.
 * The Controller also validates if the appointment is outside office hours
 * or overlapping with existing appointments.
 */
public class AddAppointment implements Initializable {


    public DatePicker addDate;
    public ComboBox<Customers> addCustomerId;
    public ComboBox<Users> addUserId;
    public ComboBox<Contacts> addContact; //Contacts replaces String
    public ComboBox<String> addApptType;
    public Button addSaveButton;
    public Button addCancelButton;

    //text fields
    @FXML
    private TextField addApptID;
    @FXML
    private TextField addTitle;
    @FXML
    private TextField addDescription;
    @FXML
    private TextField addLocation;

    @FXML
    private TextField addStartTime;
    @FXML
    private TextField addEndTime;

    //combo box
    @FXML
    public ComboBox<Customers> customerID;
    @FXML
    private ComboBox<?> userID;

    //buttons
    @FXML
    private Button saveButton;
    @FXML
    private Button cancelButton;

    Appointments newAppointment;

    public void onAddApptId(ActionEvent event) {
    }

    public void onAddTitle(ActionEvent event) {
    }

    public void onAddDescription(ActionEvent event) {
    }

    public void onAddLocation(ActionEvent event) {
    }

    public void onAddContact(ActionEvent event) {
    }

    public void onAddApptType(ActionEvent event) {
    }

    public void onAddDate(ActionEvent event) {
    }

    public void onAddStartTime(ActionEvent actionEvent) {
    }

    public void onAddEndTime(ActionEvent actionEvent) {
    }

    public void onAddCustomerID(ActionEvent actionEvent) {
    }

    public void onAddUserId(ActionEvent event) {
    }

    //Appointment is added to the database when the form is properly completed.

    public void onAddSaveButton(ActionEvent event) throws IOException, SQLException {

        //gets data from form
        int apptId = 0;
        String title = addTitle.getText();
        System.out.println("title =" + title);
        String description = addDescription.getText();
        System.out.println("description = " + description);
        String location = addLocation.getText();
        System.out.println("location = " + location);

        Contacts contact = addContact.getValue();
        //System.out.println("Type = " + type + " Contact = " + contact.getContactId());
        String type = addApptType.getValue();

        LocalDate date = addDate.getValue();
        LocalTime startTime = LocalTime.parse(addStartTime.getText());
        LocalTime endTime = LocalTime.parse(addEndTime.getText());
        System.out.println("date = " + date + " time = " + startTime);
        LocalDateTime startDateTime = LocalDateTime.of(date, startTime);
        System.out.println("Date time is " + startDateTime);
        LocalDateTime endDateTime = LocalDateTime.of(date, endTime);

        Customers customer = addCustomerId.getValue();
        Users user = addUserId.getValue();


        //Contacts contId = ContactsDB.getContactIdByName(addContact.getSelectionModel().getSelectedItem());

        try {
            if (validateAppointment()) { //if form is filled correctly the new appointment will be made and appear on Appointment Screen

                Appointments newAppointment = new Appointments(apptId, title, description, location, contact.getContactId(), type, startDateTime, endDateTime, customer.getCustomerID(), user.getUserId());
                AppointmentsDB.addAppointment(newAppointment);

                Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
                Parent scene = FXMLLoader.load(getClass().getResource("/View/AppointmentsScreen.fxml"));
                stage.setScene(new Scene(scene));
                stage.show();

            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }


    //Cancels appointment addition and directs back to Appointment Screen

    /**
     * LAMBDA expression:
     * Responses to alert box and transfers program control to previous form, this simplifies the code to return back to previous screen
     * @param event
     * @throws IOException
     *
     */
    public void onCancelButton(ActionEvent event) throws IOException {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to ignore your changes?",
                ButtonType.OK,
                ButtonType.CANCEL);

        alert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.OK) {
                Parent addAppointment = null;

                try {
                    addAppointment = FXMLLoader.load(getClass().getResource("/View/AppointmentsScreen.fxml"));
                } catch (IOException e) {
                    e.printStackTrace();
                }

                Scene partScene = new Scene(addAppointment);
                Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
                window.setScene(partScene);
                window.show();

            }

        });
    }


    //Sets initial conditions of the columns in the table view and prepopulates comboboxes
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        addApptType.setItems(Appointments.typesList);
        addContact.setItems(ContactsDB.getAllContacts());
        addCustomerId.setItems(CustomersDB.getAllCustomers());
        addUserId.setItems(UsersDB.getAllUsers());
        LocalDateTime start = LocalDateTime.now();
        LocalDateTime end = LocalDateTime.now();
        addDate.setValue(start.toLocalDate());
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm");
        addStartTime.setText("" + start.toLocalTime().format(dtf));
        addEndTime.setText("" + end.toLocalTime().format(dtf));
    }


    private boolean validateAppointment() {
        //Error pop up if Title is blank
        if (addTitle.getText().isBlank()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Title can not be blank");
            alert.show();
            return false;
        }

        //Error pop up if Description is blank
        if (addDescription.getText().isBlank()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Description can not be blank");
            alert.show();
            return false;
        }

        //Error pop up if Location is blank
        if (addLocation.getText().isBlank()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Title can not be blank");
            alert.show();
            return false;
        }

        //Error pop up if Contact is not selected
        if (addContact.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Please choose a Contact");
            alert.show();
            return false;
        }

        //Error pop up if Appointment Type is not selected
        if (addApptType.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Please choose an Appointment type");
            alert.show();
            return false;
        }
        //Error pop up if Date is not selected
        if (addDate.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Please choose a date");
            alert.show();
            return false;
        }
        //Error pop up if Appointment Type is not selected
        if (addStartTime.getText().isBlank()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Start time can not be blank");
            alert.show();
            return false;
        }
        //Error pop up if End Time is not entered
        if (addEndTime.getText().isBlank()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("End time can not be blank");
            alert.show();
            return false;
        }


        //Error pop up if Customer Id is not selected
        Customers customer = addCustomerId.getValue();
        if (customer == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Please choose a Customer ID");
            alert.show();
            return false;
        }

        //Error pop up if User Id is not selected
        if (addUserId.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Please choose a User ID");
            alert.show();
            return false;

        }


        //check if appointment time is outside office hours

        LocalDate localStartDate = addDate.getValue();
        LocalDate localEndDate = addDate.getValue();

        DateTimeFormatter minHourFormat = DateTimeFormatter.ofPattern("HH:mm");

        LocalTime localStartTime = LocalTime.parse(addStartTime.getText(), minHourFormat);
        LocalTime localEndTime = LocalTime.parse(addEndTime.getText(), minHourFormat);

        LocalDateTime dateTimeStart = LocalDateTime.of(localStartDate, localStartTime);
        LocalDateTime dateTimeEnd = LocalDateTime.of(localEndDate, localEndTime);

        ZonedDateTime zdtStart = ZonedDateTime.of(dateTimeStart, ZoneId.systemDefault());
        ZonedDateTime zdtEnd = ZonedDateTime.of(dateTimeEnd, ZoneId.systemDefault());

        ZonedDateTime convertESTStart = zdtStart.withZoneSameInstant(ZoneId.of("America/New_York"));
        ZonedDateTime convertESTEnd = zdtEnd.withZoneSameInstant(ZoneId.of("America/New_York"));

        LocalTime checkStartTime = convertESTStart.toLocalTime();
        LocalTime checkEndTime = convertESTEnd.toLocalTime();

        LocalTime estStartHours = LocalTime.of(8, 0, 0);
        LocalTime estEndHours = LocalTime.of(22, 0, 0);


        if (checkStartTime.isBefore(estStartHours) || checkStartTime.isAfter(estEndHours) || checkEndTime.isBefore(estStartHours) || checkEndTime.isAfter(estEndHours))
        {
            System.out.println("Appointment time outside business hours");
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "The time you entered is outside business hours, please enter a new time between 8:00AM to 10:00AM EST");
            Optional<ButtonType> confirmation = alert.showAndWait();
            return false;
        }

        //overlap appointment
        ObservableList<Appointments> currentApptList = FXCollections.observableArrayList();
        currentApptList = AppointmentsDB.getAllAppointments();

        for (Appointments appointment : currentApptList) {
            //LocalDate currentDate = appointment.getStartTime().toLocalDate();

            if(customer.getCustomerID() != appointment.getCustomerId()){
                continue; //ends the current iteration in a loop and continues to the next iteration
            }

            if(dateTimeStart.isBefore(appointment.getStartTime()) && dateTimeEnd.isAfter(appointment.getEndTime())){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Appointment Overlap");
                alert.setHeaderText("Appointment Error Overlap");
                alert.setContentText("The appointment you are trying to add overlaps with another appointment, please select a new time." +
                        " The appointment you overlap with is");
                alert.showAndWait();

                return false;
            }

            if(dateTimeStart.isAfter(appointment.getStartTime()) && dateTimeStart.isBefore(appointment.getEndTime())){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Appointment Overlap");
                alert.setHeaderText("Appointment Error Overlap");
                alert.setContentText("The appointment you are trying to add overlaps with another appointment, please select a new time." +
                        " The appointment you overlap with is");
                alert.showAndWait();

                return false;
            }

            if(dateTimeEnd.isAfter(appointment.getStartTime()) && dateTimeEnd.isBefore(appointment.getEndTime())){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Appointment Overlap");
                alert.setHeaderText("Appointment Error Overlap");
                alert.setContentText("The appointment you are trying to add overlaps with another appointment, please select a new time." +
                        " The appointment you overlap with is");
                alert.showAndWait();

                return false;
            }

            if(dateTimeEnd.isEqual(appointment.getEndTime()) || dateTimeStart.isEqual(appointment.getStartTime())){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Appointment Overlap");
                alert.setHeaderText("Appointment Error Overlap");
                alert.setContentText("The appointment you are trying to add overlaps with another appointment, please select a new time." +
                        " The appointment you overlap with is");
                alert.showAndWait();

                return false;
            }

        }
        return true;
    }

}
